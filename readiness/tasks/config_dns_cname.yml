---

- name: create/dns/cname/nsupdate | create/update CNAME records in bind (nsupdate)
  nsupdate:
    key_name: "{{cluster_vars[buildenv].nsupdate_cfg.key_name | default(bind9[buildenv].key_name)}}"
    key_secret: "{{cluster_vars[buildenv].nsupdate_cfg.key_secret | default(bind9[buildenv].key_secret)}}"
    server: "{{cluster_vars[buildenv].nsupdate_cfg.server | default(bind9[buildenv].server)}}"
    zone: "{{cluster_vars.dns_nameserver_zone}}"
    record: "{{item.hostname | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.' + cluster_vars.dns_nameserver_zone, '\\1')}}"
    value:  "{{item.hostname}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.' + cluster_vars.dns_nameserver_zone, '\\1')}}"
    type: CNAME
    state: present
    ttl: 30
  with_items: "{{ cluster_hosts_target }}"
  delegate_to: localhost
  run_once: true
  when: cluster_vars.dns_server == "nsupdate"

- name: create/dns/cname/route53 | create/update CNAME records in AWS (route53)
  block:
    - name: config/dns/cname/route53 | Gather info for pre-existing Hosted Zones (public and/or private)
      route53_info:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        query: hosted_zone
      become: false
      delegate_to: localhost
      register: r__route53_info__zones

    - name: config/dns/cname/route53 | create/update CNAME records for all matching zones, (public and/or private) in AWS (route53)
      route53:
        aws_access_key: "{{cluster_vars[buildenv].aws_access_key}}"
        aws_secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
        state: present
        zone: "{{cluster_vars.dns_nameserver_zone}}"
        record: "{{item.hostname | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain}}"
        type: CNAME
        ttl: 30
        value: "{{item.hostname}}.{{cluster_vars.dns_user_domain}}"
        private_zone: "{{ item.private_zone }}"
        overwrite: true
      with_items: |
        {% set res = [] -%}
        {%- for cht_host in cluster_hosts_target -%}
          {%- for hosted_zone in r__route53_info__zones.HostedZones | default([]) | json_query('[?Name==`' + cluster_vars.dns_nameserver_zone + '.`]') -%}
            {%- if hosted_zone.Config.PrivateZone|bool == true and 'ipv4_private' in hostvars[cht_host.hostname]  or  hosted_zone.Config.PrivateZone|bool == false and 'ipv4_public' in hostvars[cht_host.hostname] -%} 
              {%- set _ = res.append({'hostname': cht_host.hostname, 'private_zone': hosted_zone.Config.PrivateZone}) -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
        {{res}}
      become: false
      delegate_to: localhost
      run_once: true
      when: cluster_vars.dns_server == "route53"
      async: 7200
      poll: 0
      register: r__route53

    - name: config/dns/cname/route53 | Wait for records to be replicated to all Amazon Route 53 DNS servers
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: route53_jobs
      until: route53_jobs.finished
      delay: 1
      retries: 300
      run_once: true
      with_items: "{{r__route53.results}}"
      delegate_to: localhost
  when: cluster_vars.dns_server == "route53"

- name: config/dns/cname/clouddns | create/update CNAME records in clouddns
  block:
    - name: config/dns/cname/clouddns | Gather info for a pre-existing GCP Managed Zone and store as dict
      gcp_dns_managed_zone_info:
        auth_kind: serviceaccount
        dns_name: "{{cluster_vars.dns_nameserver_zone}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
      register: r__gcp_dns_managed_zone_info
      become: false
      delegate_to: localhost
      run_once: true

    - name: config/dns/cname/clouddns | create/update CNAME records in GCP (clouddns)
      gcp_dns_resource_record_set:
        auth_kind: serviceaccount
        managed_zone:
          name: "{{item.1.name}}"
          dnsName: "{{item.1.dnsName}}"
        name: "{{item.0.hostname | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        service_account_file: "{{gcp_credentials_file}}"
        state: present
        target: "{{item.0.hostname}}.{{cluster_vars.dns_user_domain}}"
        type: CNAME
        ttl: 60
      with_nested:
        - "{{ cluster_hosts_target }}"
        - "{{ r__gcp_dns_managed_zone_info.resources | json_query(\"[?dnsName==`\" + cluster_vars.dns_nameserver_zone + \"` && !(peeringConfig)]\") }}"
      become: false
      delegate_to: localhost
      run_once: true
      register: r__gcp_dns_resource_record_set
      until: r__gcp_dns_resource_record_set is success
      retries: 10
  when: cluster_vars.dns_server == "clouddns"
