---

- name: create/esxifree | Create vmware instances from template
  dseeley.esxifree_guest.esxifree_guest:
    hostname: "{{ cluster_vars.esxi.esxi_ip }}"
    username: "{{ cluster_vars.esxi.username }}"
    password: "{{ cluster_vars.esxi.password }}"
    datastore: "{{ cluster_vars.esxi.datastore }}"
    template: "{{ item.image }}"
    name: "{{ item.hostname }}"
    state: present
    hardware:
      version: "{{ cluster_vars.esxi.hardware_version }}"
      num_cpus: "{{ item.flavor['num_cpus'] }}"
      memory_mb: "{{ item.flavor['memory_mb'] }}"
      memory_reservation_lock: "{{ item.flavor['memory_reservation_lock'] | default('TRUE') }}"
    annotation: "{{ _tagslabels | combine(cluster_vars.custom_tagslabels | default({})) }}"
    cloudinit_userdata: "{{ cluster_vars.esxi.cloudinit_userdata | default({}) }}"
    delete_cloudinit:  "{{ cluster_vars.esxi.delete_cloudinit | default(omit) }}"
    disks: "{{ item.auto_volumes | json_query(\"[].{size_gb: volume_size, type: provisioning_type, volname: volname, src: src }\") | default([]) }}"
    networks: "{{ item.networks | default([]) }}"
    wait: true
  register: esxi_instances
  run_once: true
  with_items: "{{ cluster_hosts_target }}"
  async: 7200
  poll: 0
  vars:
    _tagslabels:
      cv__app_version: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].version | default(omit)}}"
      cv__cluster_suffix: "{{cluster_suffix}}"
      cv__hosttype: "{{item.hosttype}}"
      cv__lifecycle_state: "current"
      cv__regionzone: "{{cluster_vars.region}}-{{item.az_name}}"    # cv__regionzone needed here for esxifree because esxifree doesn't store zone metadata natively


- name: create/esxifree | Wait for instance creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: r__async_status__esxifree_guest
  until: r__async_status__esxifree_guest is finished
  retries: 300
  with_items: "{{ esxi_instances.results }}"

#- name: create/esxifree | r__async_status__esxifree_guest
#  debug: msg={{r__async_status__esxifree_guest}}

- name: create/esxifree | Set a fact containing the newly-created hosts
  set_fact:
    cluster_hosts_created: "{{ r__async_status__esxifree_guest.results | json_query(\"[?changed==`true`].item.item.hostname\") }}"

- name: create/esxifree | debug cluster_hosts_created
  debug: msg="{{cluster_hosts_created}}"
