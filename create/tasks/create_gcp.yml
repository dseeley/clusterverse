---

- name: create/gcp | cluster_hosts_target_denormalised_by_volume
  debug: msg="{{cluster_hosts_target_denormalised_by_volume}}"

- name: create/gcp | Create network and subnetwork (if -e create_gcp_network=true)
  block:
    - name: create/gcp | Create host network (if -e create_gcp_network=true)
      google.cloud.gcp_compute_network:
        name: "{{cluster_vars[buildenv].vpc_network_name}}"
        auto_create_subnetworks: "{%- if cluster_vars[buildenv].vpc_subnet_name is defined and cluster_vars[buildenv].vpc_subnet_name != '' -%} false {%- else -%} true {%- endif -%}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
      register: r__gcp_compute_network

    - name: create/gcp | Create host subnetwork (if -e create_gcp_network=true)
      google.cloud.gcp_compute_subnetwork:
        name: "{{cluster_vars[buildenv].vpc_subnet_name}}"
        network: "{{r__gcp_compute_network}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
      when: (cluster_vars[buildenv].vpc_subnet_name is defined) and (cluster_vars[buildenv].vpc_subnet_name != "")
  when: create_gcp_network is defined and create_gcp_network|bool


- name: create/gcp | Create firewalls
  block:
    - name: create/gcp | Get network facts
      google.cloud.gcp_compute_network_info:
        filters:
          - "name = {{cluster_vars[buildenv].vpc_network_name}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
      register: r__gcp_compute_network_info

    - name: "Assert that {{cluster_vars[buildenv].vpc_network_name}} network exists"
      assert: { that: "r__gcp_compute_network_info['resources'] | length > 0", msg: "The {{cluster_vars[buildenv].vpc_network_name}} network must exist (create with ' -e create_gcp_network=true')" }

    - name: create/gcp | Get subnetwork facts
      google.cloud.gcp_compute_subnetwork_info:
        filters:
          - "name = {{cluster_vars[buildenv].vpc_subnet_name}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        scopes: ["https://www.googleapis.com/auth/compute.readonly"]
        region: "{{cluster_vars.region}}"
      register: r__gcp_compute_subnetwork_info
      when: (cluster_vars[buildenv].vpc_subnet_name is defined) and (cluster_vars[buildenv].vpc_subnet_name != "")

    - name: "Assert that {{cluster_vars[buildenv].vpc_subnet_name}} subnet exists"
      assert: { that: "r__gcp_compute_subnetwork_info['resources'] | length > 0", msg: "The {{cluster_vars[buildenv].vpc_subnet_name}} subnet must exist" }
      when: (cluster_vars[buildenv].vpc_subnet_name is defined) and (cluster_vars[buildenv].vpc_subnet_name != "")

    - name: create/gcp | Create cluster firewalls
      google.cloud.gcp_compute_firewall:
        name: "{{ item.name }}"
        target_tags: "{{cluster_vars.network_fw_tags}}"
        allowed: "{{ item.allowed }}"
        description: "{{ item.description }}"
        source_ranges: "{{ item.source_ranges | default([]) }}"
        source_tags: "{{ item.source_tags | default([]) }}"
        direction: "{{ item.direction | default(omit) }}"
        priority: "{{ item.priority | default(omit) }}"
        network: "{{r__gcp_compute_network_info['resources'][0]}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
      with_items: "{{ cluster_vars.firewall_rules }}"


- name: create/gcp | Create VMs asynchronously and wait for completion
  block:
    - name: create/gcp | Detach volumes from previous instances (during the _scheme_rmvm_keepdisk_rollback redeploy, we only redeploy one host at a time, and it is already powered off)
      gcp_detach_disk:
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        zone: "{{cluster_vars.region}}-{{item.az_name}}"
        name: "{{item.auto_volume.src.source_url | basename}}"
        instance_name: "{{ item.auto_volume.src.hostname }}"
      loop: "{{ cluster_hosts_target_denormalised_by_volume | selectattr('auto_volume.src', 'defined') | list }}"

    - name: create/gcp | If (cluster_vars.assign_public_ip in [true, 'static']) then create a new static IP for each instance
      google.cloud.gcp_compute_address:
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        region: "{{cluster_vars.region}}"
        name: "{{ item.hostname }}"
        state: present
      register: r__gcp_compute_address
      loop: "{{ cluster_hosts_target }}"
      when: "'assign_public_ip' in cluster_vars and cluster_vars.assign_public_ip in [true, 'static']"

    - name: create/gcp | r__gcp_compute_address
      debug: msg={{r__gcp_compute_address}}

    - name: create/gcp | Create VMs asynchronously
      google.cloud.gcp_compute_instance:
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        zone: "{{cluster_vars.region}}-{{item.az_name}}"
        name: "{{item.hostname}}"
        machine_type: "{{item.flavor}}"
        disks: "{{ [_bootdisk] + (_autodisks | default([])) }}"
        metadata: "{{ cluster_vars.metadata | default(omit) }}"
        labels: "{{ _labels | combine(cluster_vars.custom_tagslabels | default({})) }}"
        network_interfaces:
          - network: "{{ r__gcp_compute_network_info['resources'][0] | default({}) }}"
            subnetwork: "{{ r__gcp_compute_subnetwork_info['resources'][0] | default({}) }}"
            access_configs: |-
              {%- set ns = namespace(res=[]) -%}
              {%- if 'assign_public_ip' in cluster_vars and cluster_vars.assign_public_ip in [true, 'dynamic', 'static'] -%}
                {%- set config = {'name': 'External NAT', 'type': 'ONE_TO_ONE_NAT'} -%}
                {%- if 'assign_public_ip' in cluster_vars and cluster_vars.assign_public_ip in [true, 'static'] -%}
                  {%- set config = config | combine({'nat_ip': {'address': r__gcp_compute_address.results | json_query('[?name==\'' + item.hostname + '\'] | [0].address')}}) -%}
                {%- endif -%}
                {%- set ns.res = ns.res + [config] -%}
              {%- endif -%}
              {{ ns.res }}
        tags: { items: "{{cluster_vars.network_fw_tags}}" }
        can_ip_forward: "{{cluster_vars.ip_forward}}"
        scheduling: { automatic_restart: true, preemptible: "{{cluster_vars[buildenv].preemptible}}" }
        state: present
        deletion_protection: "{{cluster_vars[buildenv].deletion_protection}}"
      vars:
        _bootdisk: {auto_delete: true, boot: true, device_name: "{{ item.hostname }}--boot", initialize_params: {source_image: "{{item.image}}", disk_name: "{{ item.hostname }}--boot", disk_size_gb: "{{ cluster_vars[buildenv].hosttype_vars[item.hosttype].rootvol_size | default(omit) }}"}}
        _autodisks: "{{item.auto_volumes | json_query(\"[].{auto_delete: auto_delete, interface: interface, device_name: device_name, initialize_params: initialize_params, source: {selfLink: src.source_url}}\") }}"
        _labels:
          name: "{{item.hostname}}"
          cv__app_version: "{{cluster_vars[buildenv].hosttype_vars[item.hosttype].version | default(omit)}}"
          cv__cluster_suffix: "{{cluster_suffix}}"
          cv__hosttype: "{{item.hosttype}}"
          cv__lifecycle_state: "current"
      register: r__gcp_compute_instance
      with_items: "{{cluster_hosts_target}}"
      async: 7200
      poll: 0

    - name: create/gcp | Wait for instance creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: r__async_status__gcp_compute_instance
      until: r__async_status__gcp_compute_instance is finished
      delay: 3
      retries: 300
      with_items: "{{r__gcp_compute_instance.results}}"

    - name: create/gcp | r__async_status__gcp_compute_instance.results
      debug: msg={{r__async_status__gcp_compute_instance.results}}

    - name: create/gcp | Set a fact containing the newly-created hosts
      set_fact:
        cluster_hosts_created: "{{ r__async_status__gcp_compute_instance.results | json_query(\"[?item.changed==`true`].item.item.hostname\") }}"

    - name: create/gcp | debug cluster_hosts_created
      debug: msg="{{cluster_hosts_created}}"

    - name: create/gcp | Label the volumes
      google.cloud.gcp_compute_disk:
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        zone: "{{item.regionzone}}"
        name: "{{item.device_name}}"
        type: "{{item.disk_type}}"
        labels: "{{ _labels | combine(cluster_vars.custom_tagslabels | default({})) }}"
      with_items: "{{_ec2_vols_denormalised_by_device}}"
      vars:
        _ec2_vols_denormalised_by_device: |-
          {% set ns_res = namespace(res=[])-%}
          {%- for host_instance in r__async_status__gcp_compute_instance.results -%}
            {%- for disk in host_instance.disks -%}
              {% set ns_res.res = ns_res.res + [{'hostname': host_instance.name , 'hosttype': host_instance.labels.cv__hosttype, 'device_name': disk.deviceName, 'disk_name': disk.source | basename, 'disk_type': disk.type | basename, 'resource_url': disk.source, 'regionzone': host_instance.invocation.module_args.zone}] -%}
            {%- endfor %}
          {%- endfor %}
          {{ ns_res.res }}
        _labels:
          name: "{{ item.device_name }}"
