---

- name: clean/dns | hosts_to_clean
  debug: msg="{{hosts_to_clean}}"

- block:
    - name: clean/dns/nsupdate | Delete DNS entries
      block:
        - name: clean/dns/nsupdate | Delete A records
          community.general.nsupdate:
            key_name: "{{cluster_vars[buildenv].nsupdate_cfg.key_name | default(bind9[buildenv].key_name)}}"
            key_secret: "{{cluster_vars[buildenv].nsupdate_cfg.key_secret | default(bind9[buildenv].key_secret)}}"
            server: "{{cluster_vars[buildenv].nsupdate_cfg.server | default(bind9[buildenv].server)}}"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            state: "absent"
            record: "{{item.name}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.?' + cluster_vars.dns_nameserver_zone, '\\1')}}"
          with_items: "{{ hosts_to_clean }}"

        - name: clean/dns/nsupdate | Delete CNAME records
          community.general.nsupdate:
            key_name: "{{cluster_vars[buildenv].nsupdate_cfg.key_name | default(bind9[buildenv].key_name)}}"
            key_secret: "{{cluster_vars[buildenv].nsupdate_cfg.key_secret | default(bind9[buildenv].key_secret)}}"
            server: "{{cluster_vars[buildenv].nsupdate_cfg.server | default(bind9[buildenv].server)}}"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{item.name | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.?' + cluster_vars.dns_nameserver_zone, '\\1')}}"
            value: "{{item.name}}.{{cluster_vars.dns_user_domain | regex_replace('^(.*?)\\.?' + cluster_vars.dns_nameserver_zone, '\\1')}}"
            type: CNAME
            state: absent
          with_items: "{{ hosts_to_clean }}"
          vars:
            cname_to_check: "{{ item.name | regex_replace('-(?!.*-).*') }}.{{cluster_vars.dns_user_domain}}."
            cname_value: "{{ lookup('dig', cname_to_check, 'qtype=CNAME', '@'+cluster_vars[buildenv].nsupdate_cfg.server | default(bind9[buildenv].server)) }}"
          when: (item.name + '.' + cluster_vars.dns_user_domain + "." == cname_value)
      when: cluster_vars.dns_server == "nsupdate"


    - name: "clean/dns/route53 | Delete DNS entries (legacy (faster) mechanism: route53(state=get)/ route53)"
      block:
        - name: clean/dns/route53 | Gather info for pre-existing Hosted Zones (public and/or private)
          amazon.aws.route53_info:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            query: hosted_zone
          register: r__route53_info__zones

        - name: clean/dns/route53 | Get A records
          amazon.aws.route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "get"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{item.0.name}}.{{cluster_vars.dns_user_domain}}"
            type: "A"
            private_zone: "{{ item.1.config.private_zone }}"
          ignore_errors: true        # In the ansible=4.x versions of route53.py, a failed lookup results in a failure of this route53 module.
          register: r__route53_a
          with_nested:
            - "{{ hosts_to_clean }}"
            - "{{ r__route53_info__zones.hosted_zones | json_query(\"[?name==`\" + cluster_vars.dns_nameserver_zone + \".`]\") }}"

        - name: clean/dns/route53 | Remove failed DNS lookups from route53 state=get  (this happens with all the ansible=4.x versions of route53.py)
          set_fact:
            r__route53_a: "{{r__route53_a.results | selectattr('failed', '==', false) | list}}"
          when: r__route53_a is failed

        - name: clean/dns/route53 | Delete A records
          amazon.aws.route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "absent"
            zone: "{{ cluster_vars.dns_nameserver_zone }}"
            record: "{{ item.resource_record_sets.name }}"
            type: "{{ item.resource_record_sets.type }}"
            ttl: "{{ item.resource_record_sets.ttl }}"
            value: "{{ item.resource_record_sets.resource_records | json_query(\"[].value\") }}"
            private_zone: "{{ item.private_zone }}"
          with_items: "{{ records_to_clean }}"
          vars:
            _fqdns_to_clean: "{{ hosts_to_clean | json_query(\"[].name\") | map('regex_replace', '^(.*)$', '\\1.' + cluster_vars.dns_user_domain + '.') | list }}"
            records_to_clean: "{{ r__route53_a.results | json_query(\"[?resource_record_sets[?type=='A' && contains(\"+ _fqdns_to_clean | string +\", name)]].{resource_record_sets: resource_record_sets[?type=='A']|[0], item0name: item[0].name, private_zone: item[1].config.private_zone}\") }}"

        - name: clean/dns/route53 | Get CNAME records
          amazon.aws.route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "get"
            zone: "{{cluster_vars.dns_nameserver_zone}}"
            record: "{{item.0.name | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain}}"
            type: "CNAME"
            private_zone: "{{ item.1.config.private_zone }}"
          ignore_errors: true        # In the ansible=4.x versions of route53.py, a failed lookup results in a failure of this route53 module.
          register: r__route53_cname
          with_nested:
            - "{{ hosts_to_clean }}"
            - "{{ r__route53_info__zones.hosted_zones | json_query(\"[?name==`\" + cluster_vars.dns_nameserver_zone + \".`]\") }}"

        - name: clean/dns/route53 | Remove failed DNS lookups from route53 state=get  (this happens with all the ansible=4.x versions of route53.py)
          set_fact:
            r__route53_cname: "{{r__route53_cname.results | selectattr('failed', '==', false) | list}}"
          when: r__route53_cname is failed

        - name: clean/dns/route53 | Delete CNAME records
          amazon.aws.route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "absent"
            zone: "{{ item.1.set.zone }}"
            record: "{{ item.1.set.record }}"
            type: "{{ item.1.set.type }}"
            ttl: "{{ item.1.set.ttl }}"
            value: ["{{ item.1.set.value }}"]
            private_zone: "{{ item.1.item.1.config.private_zone }}"
          with_nested:
            - "{{ hosts_to_clean }}"
            - "{{ r__route53_cname.results }}"
          when: (item.1.set.value is defined)  and  ((item.0.name | regex_replace('-(?!.*-).*')) == (item.1.set.record | regex_replace('^(.*?)\\..*$', '\\1')))  and  (item.0.name == item.1.set.value | regex_replace('^(.*?)\\..*$', '\\1'))
      when: cluster_vars.dns_server == "route53" and (use_new_route53 is not defined or use_new_route53|bool == false)


    - name: "clean/dns/route53 | Delete DNS entries (new mechanism: route53_zone/ route53_info/ route53)"
      block:
        - name: clean/dns/route53 | Gather info for pre-existing Hosted Zones (public and/or private)
          amazon.aws.route53_info:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            query: hosted_zone
          register: r__route53_info__zones

        # Note: route53_info currently does not honour the 'max_items' or 'type' fields, (and if 'start_record_name' is not found, it just returns all records), so we need to filter the responses to match 'hosts_to_clean' when doing the delete
        # Note: cannot run route53_info asynchronously as it makes too many concurrent requests and blows the AWS Route53 API limit.
        - name: clean/dns/route53 | Get A records
          amazon.aws.route53_info:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            type: "A"
            max_items: 1
            query: record_sets
            hosted_zone_id: "{{ item.1.id }}"
            start_record_name: "{{item.0.name}}.{{cluster_vars.dns_user_domain}}"
          register: r__route53_info__a
          until: r__route53_info__a is success
          retries: 10
          with_nested:
            - "{{ hosts_to_clean }}"
            - "{{ r__route53_info__zones.hosted_zones | json_query(\"[?name==`\" + cluster_vars.dns_nameserver_zone + \".`]\") }}"

        - name: clean/dns/route53 | Delete A records
          amazon.aws.route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "absent"
            zone: "{{ cluster_vars.dns_nameserver_zone }}"
            record: "{{ item.resource_record_sets.name }}"
            type: "{{ item.resource_record_sets.type }}"
            ttl: "{{ item.resource_record_sets.ttl }}"
            value: "{{ item.resource_record_sets.resource_records | json_query(\"[].value\") }}"
            private_zone: "{{ item.private_zone }}"
          with_items: "{{ records_to_clean }}"
          vars:
            _fqdns_to_clean: "{{ hosts_to_clean | json_query(\"[].name\") | map('regex_replace', '^(.*)$', '\\1.' + cluster_vars.dns_user_domain + '.') | list }}"
            records_to_clean: "{{ r__route53_info__a.results | json_query(\"[?resource_record_sets[?type=='A' && contains(\"+ _fqdns_to_clean | string +\", Name)]].{resource_record_sets: resource_record_sets[?type=='A']|[0], item0name: item[0].name, private_zone: item[1].config.private_zone}\") }}"

        # Note: route53_info currently does not honour the 'max_items' or 'type' fields, (and if 'start_record_name' is not found, it just returns all records), so we need to filter the responses to match 'hosts_to_clean' when doing the delete
        # Note: cannot run route53_info asynchronously as it makes too many concurrent requests and blows the AWS Route53 API limit.
        - name: clean/dns/route53 | Get CNAME records
          amazon.aws.route53_info:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            type: "CNAME"
            max_items: 1
            query: record_sets
            hosted_zone_id: "{{ item.1.id }}"
            start_record_name: "{{item.0.name | regex_replace('-(?!.*-).*')}}.{{cluster_vars.dns_user_domain}}"
          register: r__route53_info__cname
          with_nested:
            - "{{ hosts_to_clean }}"
            - "{{ r__route53_info__zones.hosted_zones | json_query(\"[?name==`\" + cluster_vars.dns_nameserver_zone + \".`]\") }}"
          until: r__route53_info__cname is success
          retries: 10

        - name: clean/dns/route53 | Delete CNAME records
          amazon.aws.route53:
            access_key: "{{cluster_vars[buildenv].aws_access_key}}"
            secret_key: "{{cluster_vars[buildenv].aws_secret_key}}"
            session_token: "{{cluster_vars[buildenv].aws_session_token | default(omit)}}"
            state: "absent"
            zone: "{{ cluster_vars.dns_nameserver_zone }}"
            record: "{{ item.1.resource_record_sets.name }}"
            type: "{{ item.1.resource_record_sets.type }}"
            ttl: "{{ item.1.resource_record_sets.ttl }}"
            value: "{{ item.1.resource_record_sets.resource_records | json_query(\"[].value\") }}"
            private_zone: "{{ item.1.private_zone }}"
          with_nested:
            - "{{ hosts_to_clean }}"
            - "{{ records_to_clean }}"
          vars:
            _fqdns_to_clean: "{{ hosts_to_clean | json_query(\"[].name\") | map('regex_replace', '^(.*)-(?!.*-).*$', '\\1.' + cluster_vars.dns_user_domain + '.') | list }}"   #Remove the last '-.*' (cluster_suffix)
            records_to_clean: "{{ r__route53_info__cname.results | json_query(\"[?resource_record_sets[?type=='CNAME' && contains(\"+ _fqdns_to_clean | string +\", name)]].{resource_record_sets: resource_record_sets[?type=='CNAME']|[0], item0name: item[0].name, private_zone: item[1].config.private_zone}\") }}"
          when: ((item.0.name | regex_replace('-(?!.*-).*')) == (item.1.resource_record_sets.name | regex_replace('^(.*?)\\..*$', '\\1')))  and  ((item.0.name == item.1.resource_record_sets.resource_records[0].value | regex_replace('^(.*?)\\..*$', '\\1')))
      when: cluster_vars.dns_server == "route53" and (use_new_route53 is defined and use_new_route53|bool)



    - name: clean/dns/clouddns | Delete DNS entries
      block:
        - name: clean/dns/clouddns | Get managed zone(s)
          google.cloud.gcp_dns_managed_zone_info:
            auth_kind: serviceaccount
            dns_name: "{{cluster_vars.dns_nameserver_zone}}"
            project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
            service_account_file: "{{gcp_credentials_file}}"
          register: r__gcp_dns_managed_zone_info

        - name: clean/dns/clouddns | Get all non-peered DNS records for managed zones that match cluster_vars.dns_nameserver_zone
          google.cloud.gcp_dns_resource_record_set_info:
            auth_kind: serviceaccount
            managed_zone:
              name: "{{item.name}}"
              dnsName: "{{item.dnsName}}"
            project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
            service_account_file: "{{gcp_credentials_file}}"
          register: r__gcp_dns_resource_record_set_info
          with_items: "{{r__gcp_dns_managed_zone_info.resources | json_query(\"[?dnsName==`\" + cluster_vars.dns_nameserver_zone + \"` && !(peeringConfig)]\") }}"

        - name: clean/dns/clouddns | Delete A and CNAME records
          block:
            - name: clean/dns/clouddns | Delete A records
              google.cloud.gcp_dns_resource_record_set:
                auth_kind: serviceaccount
                managed_zone:
                  name: "{{item.1.managed_zone.name}}"
                  dnsName: "{{item.1.managed_zone.dnsName}}"
                name: "{{ item.1.record.name }}"
                project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
                service_account_file: "{{gcp_credentials_file}}"
                state: absent
                target: "{{ item.1.record.rrdatas }}"
                type: A
              with_nested:
                - "{{ hosts_to_clean }}"
                - "{{ gcp_dns_resource_record_set_info__and__gcp_dns_managed_zone_info | json_query(\"[?record.type=='A']\") }}"
              register: r__gcp_dns_resource_record_set
              until: r__gcp_dns_resource_record_set is success
              retries: 10
              when: item.0.name == (item.1.record.name | regex_replace('^(.*?)\\..*$', '\\1'))

            - name: clean/dns/clouddns | Delete CNAME records
              google.cloud.gcp_dns_resource_record_set:
                auth_kind: serviceaccount
                managed_zone:
                  name: "{{item.1.managed_zone.name}}"
                  dnsName: "{{item.1.managed_zone.dnsName}}"
                name: "{{ item.1.record.name }}"
                project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
                service_account_file: "{{gcp_credentials_file}}"
                state: absent
                target: "{{ item.1.record.rrdatas[0] }}"
                type: CNAME
              with_nested:
                - "{{ hosts_to_clean }}"
                - "{{ gcp_dns_resource_record_set_info__and__gcp_dns_managed_zone_info | json_query(\"[?record.type=='CNAME']\") }}"
              register: r__gcp_dns_resource_record_set
              until: r__gcp_dns_resource_record_set is success
              retries: 10
              when: ((item.0.name |regex_replace('-(?!.*-).*')) == (item.1.record.name | regex_replace('^(.*?)\\..*$', '\\1')))  and  (item.0.name == item.1.record.rrdatas[0] | regex_replace('^(.*?)\\..*$', '\\1'))
          vars:
            gcp_dns_resource_record_set_info__and__gcp_dns_managed_zone_info: |
              {%- set res = [] -%}
              {%- for managed_zone in r__gcp_dns_resource_record_set_info.results -%}
                {%- for record in managed_zone.resources -%}
                  {%- set _dummy = res.extend([{ 'managed_zone': {'dnsName': managed_zone.item.dnsName, 'name': managed_zone.item.name}, 'record': record }]) -%}
                {%- endfor -%}
              {%- endfor -%}
              {{ res }}
      when: cluster_vars.dns_server=="clouddns"
  when: hosts_to_clean | length