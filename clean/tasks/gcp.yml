---

- name: clean/gcp | clean vms
  block:
    - name: clean/gcp | Remove deletion protection
      google.cloud.gcp_compute_instance:
        name: "{{item.name}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        zone: "{{ item.regionzone }}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        deletion_protection: 'no'
      with_items: "{{ hosts_to_clean }}"
      when: cluster_vars[buildenv].deletion_protection | bool

    - name: clean/gcp | Delete VMs
      google.cloud.gcp_compute_instance:
        name: "{{item.name}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        zone: "{{ item.regionzone }}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        state: "absent"
      with_items: "{{ hosts_to_clean }}"
      register: r__gcp_compute_instance
      async: 7200
      poll: 0

    - name: clean/gcp | Wait for VM deletion to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: async_jobs
      until: async_jobs is finished
      retries: 300
      with_items: "{{r__gcp_compute_instance.results}}"

    - name: clean/gcp | Get any attached static IPs
      google.cloud.gcp_compute_address_info:
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        region: "{{cluster_vars.region}}"
        filters:
          - address = "{{ item.ipv4.public }}"
      with_items: "{{ hosts_to_clean }}"
      register: r__gcp_compute_address_info

    - name: clean/gcp | r__gcp_compute_address_info
      debug: msg={{ r__gcp_compute_address_info }}

    - name: clean/gcp | Delete static IPs (if any were found)
      google.cloud.gcp_compute_address:
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_project_id}}"
        region: "{{cluster_vars.region}}"
        name: "{{ item.name }}"
        state: absent
      loop: "{{ r__gcp_compute_address_info.results | json_query(\"[].resources[]\") }}"
  when: hosts_to_clean | length > 0


- name: clean/gcp | clean networking (when '-e clean=_all_')
  block:
    - name: clean/networking/gcp | Delete GCP cluster firewalls
      google.cloud.gcp_compute_firewall:
        name: "{{ item.name }}"
        state: "absent"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
      with_items: "{{ cluster_vars.firewall_rules }}"

    - name: clean/gcp | Delete the GCP network (if -e delete_gcp_network=true)
      google.cloud.gcp_compute_network:
        name: "{{cluster_vars[buildenv].vpc_network_name}}"
        auth_kind: "serviceaccount"
        service_account_file: "{{gcp_credentials_file}}"
        project: "{{cluster_vars[buildenv].vpc_host_project_id}}"
        state: absent
      when: delete_gcp_network is defined and delete_gcp_network|bool
  when: clean is defined and clean == '_all_'
