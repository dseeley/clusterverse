#!groovy

@Library('github.com/dseeley/jenkinslib__docker_for_ansible@master') _
import org.dougalseeley.DockerForAnsible

def dockerForAnsible = new DockerForAnsible(this)

//These will not be needed if we're running this as a pipeline SCM job, as these are automatically added to the 'scm' variable, but if we instead just cut & paste this file into a pipeline job, they will be used as fallback
def DEFAULT_CLUSTERVERSE_URL = "https://github.com/dseeley/clusterverse"
def DEFAULT_CLUSTERVERSE_BRANCH = "master"

def DEFAULT_CLUSTERVERSE_TESTSUITE_URL = "https://github.com/dseeley/clusterverse_test"
def DEFAULT_CLUSTERVERSE_TESTSUITE_BRANCH = "master"

def pypi_ansible = ["curl", "-s", "-H", "Accept: application/json", "-H", "Content-type: application/json", "GET", "https://pypi.org/pypi/ansible/json"].execute().text
def pypi_ansible_latest = new groovy.json.JsonSlurper().parseText(pypi_ansible).info.version        // Use `info.version` instead of `.releases.keySet()[-1]`, to avoid alpha and release candidate versions


//This allows us to copy&paste this entire script into a pipeline job in the GUI for faster development time (don't have to commit/push to Git to test every change).
node {
    if (currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').size() > 0) {
        println("Get bare clusterverse repo to obtain the version history for the RELEASE gitParameter")
        git(changelog: false, poll: false, url: DEFAULT_CLUSTERVERSE_URL)
    }
}

properties([
    parameters([
        string(name: 'APP_NAME', description: "An optional custom app_name to override the default in the playbook"),
        booleanParam(name: 'APPEND_BUILD_NUMBER', defaultValue: false, description: 'Tick the box to append the Jenkins BUILD_NUMBER to APP_NAME'),
        choice(name: 'CLOUD_REGION', choices: ['libvirt/dougalab', 'esxifree/dougalab', 'aws/eu-west-1', 'azure/westeurope', 'gcp/europe-west4'], description: "Choose a cloud/region"),
        choice(name: 'BUILDENV', choices: ['sandbox', 'dev', 'stage', 'prod'], description: "Choose an environment to deploy"),
        string(name: 'CLUSTER_ID', defaultValue: 'testsuite', description: "Select a cluster_id to deploy", trim: true),
        booleanParam(name: 'DNS_FORCE_DISABLE', defaultValue: false, description: 'Tick the box to force disable the DNS as defined in playbook'),
        choice(name: 'DEPLOY_TYPE', choices: ['deploy', 'redeploy', 'clean'], description: "Choose the deploy type"),
        choice(name: 'REDEPLOY_SCHEME', choices: ['', '_scheme_addallnew_rmdisk_rollback', '_scheme_addnewvm_rmdisk_rollback', '_scheme_rmvm_rmdisk_only', '_scheme_rmvm_keepdisk_rollback', '_noredeploy_scale_in_only'], description: "Choose the redeploy schemes"),
        choice(name: 'CANARY', choices: ['none', 'start', 'finish', 'tidy'], description: "Choose the canary type"),
        booleanParam(name: 'CANARY_TIDY_ON_SUCCESS', defaultValue: false, description: 'Tick the box to tidy up successful canary (none or finish) redeploys (by default, old machines are left powered off)'),
        string(name: 'MYHOSTTYPES', description: "comma-separated string, e.g. master,slave - In redeployment you can define which host type you like to redeploy. If not defined it will redeploy all host types"),
        gitParameter(name: 'RELEASE', type: 'PT_TAG', useRepository: '.*clusterverse.git', branch: 'master', branchFilter: '.*', defaultValue: 'master', description: 'Choose an existing release version to deploy (or \'master\')', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'DESCENDING_SMART', tagFilter: '*'),
        string(name: 'CV_GIT_URL', defaultValue: DEFAULT_CLUSTERVERSE_URL, description: "The main clusterverse URL."),
        string(name: 'CV_GIT_BRANCH', defaultValue: DEFAULT_CLUSTERVERSE_BRANCH, description: "The clusterverse branch to test."),
        credentials(name: 'CV_GIT_CREDS', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', defaultValue: 'GITHUB_SVC_USER', description: 'Jenkins username/password credentials for GitHub', required: false),
        string(name: 'USER_CMDLINE_VARS', defaultValue: '', description: "Any user-defined command-line parameters."),
        string(name: 'ANSIBLE_VERSION', defaultValue: pypi_ansible_latest, description: "Ansible version."),
    ])
])

node {
    sh 'printenv | sort'
    echo "Params: $params"

    if (params.BUILDENV && params.CLUSTER_ID && params.CLOUD_REGION) {
        println("Checkout from SCM...")
        try {
            checkout(scm)
        } catch (Exception e) {
            println("scm not available: " + e.toString())
            println("we're probably *not* running in a multibranch or pipeline scm job, so we will checkout from the default (${DEFAULT_CLUSTERVERSE_TESTSUITE_URL}) branch")
            checkout([$class: 'GitSCM', branches: [[name: "*${DEFAULT_CLUSTERVERSE_TESTSUITE_BRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'WipeWorkspace']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: params.CV_GIT_CREDS ? params.CV_GIT_CREDS : '', url: DEFAULT_CLUSTERVERSE_TESTSUITE_URL]]])
        }


        /*** Use a docker image that is already on the host ***/
        //  docker.image('ubuntu_python').inside("${docker_parent_net_str} -e JENKINS_HOME=${env.JENKINS_HOME}") {

        /*** Use a docker image from the local directory ***/
        //  def jenkins_username = sh(script: 'whoami', returnStdout: true).trim()
        //  def jenkins_uid = sh(script: "id -u  ${jenkins_username}", returnStdout: true).trim()
        //  def jenkins_gid = sh(script: "id -g  ${jenkins_username}", returnStdout: true).trim()
        //  docker.build("cvops", "--build-arg JENKINS_USERNAME=${jenkins_username} --build-arg JENKINS_UID=${jenkins_uid} --build-arg JENKINS_GID=${jenkins_gid} ./jenkinsfiles").inside("${docker_parent_net_str} -e JENKINS_HOME=${env.JENKINS_HOME}") {

        def docker_parent_net_str = dockerForAnsible.get_parent_network()

        /*** Create a custom docker image within this Jenkinsfile ***/
        dockerForAnsible.build_image(ansible_version: "${params.ANSIBLE_VERSION}").inside("--init ${docker_parent_net_str}") {
            stage('Setup Environment') {
                sh 'printenv | sort'
                println("common_deploy_vars params:" + params)

                if (params.APPEND_BUILD_NUMBER == true && params.APP_NAME == "") {
                    error "APP_NAME is required when APPEND_BUILD_NUMBER is set."
                }

                withCredentials([string(credentialsId: "VAULT_PASSWORD_${params.BUILDENV.toUpperCase()}", variable: 'VAULT_PASSWORD_BUILDENV')]) {
                    env.VAULT_PASSWORD_BUILDENV = VAULT_PASSWORD_BUILDENV
                }

                sh 'ls -la ~/'
                sh 'ls -la'
                String requirementsYamlFile = './requirements.yml'
                if (params.CV_GIT_URL && params.CV_GIT_BRANCH) {
                    println("Updating $requirementsYamlFile with source ($params.CV_GIT_URL) and version ($params.CV_GIT_BRANCH) as passed in from upstream.")
                    sh "cat ${requirementsYamlFile}"
                    HashMap requirementsYaml = readYaml file: requirementsYamlFile
                    HashMap clusterverse_role = requirementsYaml.roles.find { it.name == 'clusterverse' }
                    clusterverse_role.src = params.CV_GIT_URL
                    clusterverse_role.version = params.CV_GIT_BRANCH
                    sh "rm $requirementsYamlFile"
                    writeYaml file: requirementsYamlFile, data: requirementsYaml
                }
                sh "cat ${requirementsYamlFile}"

                /* Install the required collections */
                retry(3) {
                    sh "ansible-galaxy collection install -fr requirements.yml"
                }
            }

            stage(params.DEPLOY_TYPE) {
                if (params.RELEASE != "master" && params.RELEASE != null) {
                    GIT_TOKEN = credentials("GITHUB_SVC_USER")
                    sh "git remote set-url origin https://${GIT_TOKEN_USR}:${GIT_TOKEN_PSW}@" + DEFAULT_CLUSTERVERSE_URL.replaceFirst("^(http[s]?://)", "") + ".git"
                    sh "git fetch --tags"
                    sh "git checkout ${params.RELEASE}"
                }

                String DNS_FORCE_DISABLE = ""
                if (params.DNS_FORCE_DISABLE == true && params.DNS_FORCE_DISABLE != null) {
                    DNS_FORCE_DISABLE = " -e _dns_nameserver_zone=''"
                }

                String MYHOSTTYPES = ""
                if (params.MYHOSTTYPES != "" && params.MYHOSTTYPES != null) {
                    MYHOSTTYPES = ' -e myhosttypes=' + params.MYHOSTTYPES
                }

                String APP_NAME = ""
                if (params.APP_NAME != "" && params.APP_NAME != null) {
                    APP_NAME = " -e app_name=" + params.APP_NAME
                    if (params.APPEND_BUILD_NUMBER == true) {
                        APP_NAME = APP_NAME + '-' + env.BUILD_NUMBER
                    }
                }

                def (CLOUD_TYPE, REGION) = params.CLOUD_REGION.split('/')
                if (params.DEPLOY_TYPE == 'deploy') {
                    sh "ansible-playbook -e cloud_type=${CLOUD_TYPE} -e region=${REGION} -e buildenv=${params.BUILDENV} -e clusterid=${params.CLUSTER_ID} --vault-id=default@.vaultpass-client.py --vault-id=${params.BUILDENV}@.vaultpass-client.py cluster.yml $APP_NAME $DNS_FORCE_DISABLE $MYHOSTTYPES $params.USER_CMDLINE_VARS"
                } else if (params.DEPLOY_TYPE == 'redeploy') {
                    sh "ansible-playbook -e cloud_type=${CLOUD_TYPE} -e region=${REGION} -e buildenv=${params.BUILDENV} -e clusterid=${params.CLUSTER_ID} --vault-id=default@.vaultpass-client.py --vault-id=${params.BUILDENV}@.vaultpass-client.py redeploy.yml -e canary=${params.CANARY} -e canary_tidy_on_success=${params.CANARY_TIDY_ON_SUCCESS} -e redeploy_scheme=${params.REDEPLOY_SCHEME} $APP_NAME $DNS_FORCE_DISABLE $MYHOSTTYPES $params.USER_CMDLINE_VARS"
                } else if (params.DEPLOY_TYPE == 'clean') {
                    sh "ansible-playbook -e cloud_type=${CLOUD_TYPE} -e region=${REGION} -e buildenv=${params.BUILDENV} -e clusterid=${params.CLUSTER_ID} --vault-id=default@.vaultpass-client.py --vault-id=${params.BUILDENV}@.vaultpass-client.py cluster.yml --tags=clusterverse_clean -e clean=_all_ $APP_NAME $params.USER_CMDLINE_VARS"
                } else error("DEPLOY_TYPE invalid")
            }
        }
    } else {
        if (!params.BUILDENV) {
            currentBuild.result = 'ABORTED'
            error("BUILDENV not defined")
        } else if (!params.CLUSTER_ID) {
            currentBuild.result = 'ABORTED'
            error("CLUSTER_ID not defined")
        } else if (!params.CLOUD_REGION) {
            currentBuild.result = 'ABORTED'
            error("CLOUD_REGION not defined")
        }
    }
}
