---

- name: _add_src_diskinfo_to_cluster_hosts_target/libvirt | cluster_hosts_state
  debug: msg={{cluster_hosts_state}}

#- assert: { that: "cluster_hosts_state | json_query(\"[].disk_info_cloud.*[] | [?backing_datastore!='\" + cluster_vars.datastore + \"']\") | length == 0", msg: "Move is only possible if disks are on the same datastore." }
#  when: _scheme_rmvm_keepdisk_rollback__copy_or_move == "move"

- name: _add_src_diskinfo_to_cluster_hosts_target/libvirt | augment cluster_hosts_target auto_volumes with source disk info
  ansible.builtin.set_fact:
    cluster_hosts_target: |
      {%- set ns = namespace(res=[]) -%}
      {%- for cht_host in cluster_hosts_target -%}
        {%- set updated_volumes = [] -%}
        {%- for cht_autovol in cht_host.auto_volumes -%}
          {%- set updated_vol = cht_autovol -%}
          {%- for chs_host in cluster_hosts_state | selectattr('tagslabels.cv__lifecycle_state', '!=', 'current') -%}
            {%- if cht_host.hostname | regex_replace('-(?!.*-).*') == chs_host.name | regex_replace('-(?!.*-).*') -%}
              {%- for chs_host_diskinfo in chs_host.disk_info_cloud | selectattr('serial', '==', cht_autovol.device_name) -%}
                {%- set updated_vol = cht_autovol | combine({'src': chs_host_diskinfo}) -%}
              {%- endfor -%}
            {%- endif -%}
          {%- endfor -%}
          {%- set updated_volumes = updated_volumes + [updated_vol] -%}
        {%- endfor -%}
        {%- set updated_host = cht_host | combine({'auto_volumes': updated_volumes}) -%}
        {%- set ns.res = ns.res + [updated_host] -%}
      {%- endfor -%}
      {{ ns.res }}

- name: _add_src_diskinfo_to_cluster_hosts_target/libvirt | cluster_hosts_target
  debug: msg={{cluster_hosts_target}}
