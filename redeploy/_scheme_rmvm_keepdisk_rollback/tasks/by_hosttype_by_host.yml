---

- name: by_hosttype_by_host | debug host_to_redeploy
  debug: msg="{{host_to_redeploy}}"

- name: by_hosttype_by_host | stop/ remove previous instance
  block:
    - name: by_hosttype_by_host | run predeleterole role
      include_role:
        name: "{{predeleterole}}"
      vars:
        hosts_to_remove: "{{ hosts_to_change }}"
      when: predeleterole is defined and predeleterole != ""

    - name: by_hosttype_by_host | Power off old VM
      include_role:
        name: clusterverse/redeploy/__common
        tasks_from: "powerchange_vms_{{cluster_vars.type}}.yml"
      vars:
        hosts_to_powerchange: "{{ hosts_to_change }}"
        powerchange_new_state: "stop"
  vars:
    _host_to_redeploy_nosuffix: "{{host_to_redeploy.hostname | regex_replace('-(?!.*-).*')}}"   #Remove the cluster_suffix from the hostname
    hosts_to_change: "{{ cluster_hosts_state | to_json | from_json | json_query(\"[?tagslabels.cv__lifecycle_state!='current' && starts_with(name, '\" + _host_to_redeploy_nosuffix + \"')]\") }}"

- name: by_hosttype_by_host | Power on rescued VM (hosts_to_powerchange will be empty for normal redeploy, but not in rescue case)
  include_role:
    name: clusterverse/redeploy/__common
    tasks_from: "powerchange_vms_{{cluster_vars.type}}.yml"
  vars:
    hosts_to_powerchange: "{{ cluster_hosts_state | selectattr('name', '==', host_to_redeploy.hostname) | selectattr('tagslabels.cv__lifecycle_state', '==', 'current') | selectattr('instance_state', '==', 'stopped') | list }}"
    powerchange_new_state: "start"

- name: "by_hosttype_by_host | Run {{mainclusteryml}} to add {{host_to_redeploy.hostname}} to cluster"
  dseeley.nested_playbook.nested_playbook:
    playbook_cmdline: "{{ (argv[1:] | join(' ')) | regex_replace('redeploy.yml', mainclusteryml) }} -e cluster_suffix={{cluster_suffix}} -e '{'cluster_hosts_target': [{{host_to_redeploy | to_json}}]}' {{ redeploy_extra_vars | default({}) | extravars_from_dict }}"

- name: by_hosttype_by_host | re-acquire the dynamic inventory (includes cluster_hosts_state)
  include_role:
    name: clusterverse/dynamic_inventory

- name: by_hosttype_by_host | Postflight - validate that exactly one test file exists per device
  block:
    - name: by_hosttype_by_host | Postflight - Find all .clusterverse_volcopymove_test__ files in mounted disks
      become: true
      find:
        paths: "{{item.mountpoint}}"
        hidden: true
        patterns: ".clusterverse_volcopymove_test__*"
      delegate_to: "{{ host_to_redeploy.hostname }}"
      with_items: "{{ host_to_redeploy.auto_volumes | selectattr('mountpoint', '!=', '/') }}"
      register: r__find_test

    - debug: msg={{r__find_test.results | map(attribute='files') }}

    - name: by_hosttype_by_host | Postflight - Assert that exactly one .clusterverse_volcopymove_test__ file exists per device
      assert:
        that: r__find_test.results | map(attribute='files') | map('length') | select('ne', 1) | length == 0
        fail_msg: "ERROR - Exactly one .clusterverse_volcopymove_test__ file should exist per device. Details: {{ r__find_test.results | map(attribute='files') | list }}"
  when: test_touch_disks is defined and test_touch_disks|bool
