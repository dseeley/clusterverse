---

#- name: get_cluster_hosts_state/libvirt | get cluster_hosts_state using the many individual info modules.
#  block:
#    - name: get_cluster_hosts_state/libvirt | list_vms
#      community.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.username }}@{{ cluster_vars.libvirt_ip }}/system?keyfile=id_rsa__libvirt_svc'
#        command: list_vms
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__list_vms
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__list_vms
#      delegate_to: localhost
#      run_once: true
#      debug: msg="{{r__virt__list_vms}}"
#
#    - name: get_cluster_hosts_state/libvirt | status
#      community.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.username }}@{{ cluster_vars.libvirt_ip }}/system?keyfile=id_rsa__libvirt_svc'
#        command: status
#        guest: "{{item}}"
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__status
#      loop: "{{ r__virt__list_vms.list_vms }}"
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__status
#      debug: msg="{{r__virt__status}}"
#      delegate_to: localhost
#      run_once: true
#
#    - name: get_cluster_hosts_state/libvirt | get_xml
#      community.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.username }}@{{ cluster_vars.libvirt_ip }}/system?keyfile=id_rsa__libvirt_svc'
#        command: get_xml
#        guest: "{{item.name}}"
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__xml
#      loop: "{{ r__virt__status.results | json_query(\"[].{name: item, instance_state: status}\") }}"
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__xml
#      debug: msg="{{ r__virt__xml }}"
#      delegate_to: localhost
#      run_once: true
#
#    - name: get_cluster_hosts_state/libvirt | guest_agent_info
#      dseeley.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.username }}@{{ cluster_vars.libvirt_ip }}/system?keyfile=id_rsa__libvirt_svc'
#        command: get_guest_agent_info
#        name: "{{item.name}}"
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__guest_agent_info
#      loop: "{{ r__virt__xml.results | json_query(\"[].{name: item.name, instance_state: item.instance_state, xml: get_xml }\") }}"
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__guest_agent_info
#      delegate_to: localhost
#      run_once: true
#      debug: msg="{{ r__virt__guest_agent_info }}"
#
#
#    - name: get_cluster_hosts_state/libvirt | Set cluster_hosts_state
#      set_fact:
#        cluster_hosts_state: |
#          {%- set res = [] -%}
#            {%- for res_item in r__virt__guest_agent_info.results -%}
#              {%- set cluster_host = {} -%}
#              {%- set tagslabels = res_item.item.xml | xpath('/domain/metadata/clusterverse:cdata//text()', {'clusterverse': 'https://github.com/dseeley/clusterverse'} ) | json_query('[0]') | from_yaml -%}
#              {%- if tagslabels and tagslabels['cluster_name'] == cluster_name -%}
#                {%- set _ = cluster_host.update({'tagslabels': tagslabels}) -%}
#                {%- set _ = cluster_host.update({'name': res_item.item.name}) -%}
#                {%- set _ = cluster_host.update({'instance_id': res_item.item.name}) -%}
#                {%- set _ = cluster_host.update({'instance_state': res_item.item.instance_state}) -%}
#                {%- set _ = cluster_host.update({'regionzone': tagslabels['regionzone']}) -%}
#                {%- set _ = cluster_host.update({'disk_info_cloud': [] }) -%}
#                {%- for diskIdx in range(1, (res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]/source/@file') | length + 1)) -%}
#                  {%- set _ = cluster_host.disk_info_cloud.append({'target_dev': res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/target/@dev') | json_query('[0]'), 'source_file': res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/source/@file') | json_query('[0]'), 'serial': res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/serial//text()') | json_query('[0]') }) -%}
#                {%- endfor -%}
#                {%- set _ = cluster_host.update({'ipv4': {'private': res_item['guest_agent_info']['interfaceAddresses'] | dict2items | json_query('[?key != `lo`]|[0].value.addrs[0].addr'), 'public': None }}) -%}
#                {%- set _ = res.append(cluster_host) -%}
#              {%- endif -%}
#            {%- endfor -%}
#          {{ res }}


- name: get_cluster_hosts_state/libvirt | get cluster_hosts_state using the inventory plugin.
  block:
    - name: get_cluster_hosts_state/libvirt | Get basic instance info of all vms
      set_fact:
        libvirt_inventory: "{{ lookup('dseeley.inventory_lookup.inventory', 'dseeley.libvirt.libvirt', plugin_options=params) }}"
      vars:
        params:
          uri: 'qemu+ssh://{{ cluster_vars.username }}@{{ cluster_vars.libvirt_ip }}/system?keyfile=id_rsa__libvirt_svc'

    - name: get_cluster_hosts_state/libvirt | debug libvirt_inventory
      debug: msg={{libvirt_inventory}}

    - name: get_cluster_hosts_state/libvirt | Set cluster_hosts_state
      set_fact:
        cluster_hosts_state: |
          {%- set res = [] -%}
          {%- for host in libvirt_inventory | json_query('[].all[]') -%}
            {%- set cluster_host = {} -%}
            {%- set hostname = host | json_query('keys(@) | [0]') -%}
            {%- set tagslabels = host[hostname].xml_desc | xpath('/domain/metadata/clusterverse:cdata//text()', {'clusterverse': 'https://github.com/dseeley/clusterverse'} ) | json_query('[0]') | from_yaml -%}
            {%- if tagslabels and tagslabels['cluster_name'] == cluster_name -%}
              {%- set _ = cluster_host.update({'tagslabels': tagslabels}) -%}
              {%- set _ = cluster_host.update({'name': hostname}) -%}
              {%- set _ = cluster_host.update({'instance_id': hostname}) -%}
              {%- set _ = cluster_host.update({'instance_state': host[hostname].info.state}) -%}
              {%- set _ = cluster_host.update({'regionzone': tagslabels['regionzone']}) -%}
              {%- set _ = cluster_host.update({'disk_info_cloud': [] }) -%}
              {%- for diskIdx in range(1, (host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]/source/@file') | length + 1)) -%}
                {%- set _ = cluster_host.disk_info_cloud.append({'target_dev': host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/target/@dev') | json_query('[0]'), 'source_file': host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/source/@file') | json_query('[0]'), 'serial': host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/serial//text()') | json_query('[0]') }) -%}
              {%- endfor -%}
              {%- set _ = cluster_host.update({'ipv4': {'private': host[hostname]['interface_addresses'] | dict2items | json_query('[?key != `lo`]|[0].value.addrs[0].addr'), 'public': None }}) -%}
              {%- set _ = res.append(cluster_host) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ res }}
