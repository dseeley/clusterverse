---

- name: get_cluster_hosts_state/libvirt | Copy libvirt ssh private key file
  copy: { content: "{{cluster_vars.libvirt.private_key}}", dest: '{{ playbook_dir }}/id_rsa__libvirt_svc', mode: '0600' }
  no_log: true
  delegate_to: localhost
  run_once: true
  when: "cluster_vars.type == 'libvirt'  and  cluster_vars.libvirt.private_key is defined"

#- name: get_cluster_hosts_state/libvirt | get cluster_hosts_state using the many individual info modules.
#  block:
#    - name: get_cluster_hosts_state/libvirt | list_vms
#      dseeley.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.libvirt.username }}@{{ cluster_vars.libvirt.hypervisor }}/system?keyfile=id_rsa__libvirt_svc&no_verify=1'
#        command: list_vms
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__list_vms
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__list_vms
#      delegate_to: localhost
#      run_once: true
#      debug: msg="{{r__virt__list_vms}}"
#
#    - name: get_cluster_hosts_state/libvirt | status
#      dseeley.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.libvirt.username }}@{{ cluster_vars.libvirt.hypervisor }}/system?keyfile=id_rsa__libvirt_svc&no_verify=1'
#        command: status
#        guest: "{{item}}"
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__status
#      loop: "{{ r__virt__list_vms.list_vms }}"
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__status
#      debug: msg="{{r__virt__status}}"
#      delegate_to: localhost
#      run_once: true
#
#    - name: get_cluster_hosts_state/libvirt | get_xml
#      dseeley.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.libvirt.username }}@{{ cluster_vars.libvirt.hypervisor }}/system?keyfile=id_rsa__libvirt_svc&no_verify=1'
#        command: get_xml
#        guest: "{{item.name}}"
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__xml
#      loop: "{{ r__virt__status.results | json_query(\"[].{name: item, instance_state: status}\") }}"
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__xml
#      debug: msg="{{ r__virt__xml }}"
#      delegate_to: localhost
#      run_once: true
#
#    - name: get_cluster_hosts_state/libvirt | guest_agent_info
#      dseeley.libvirt.virt:
#        uri: 'qemu+ssh://{{ cluster_vars.libvirt.username }}@{{ cluster_vars.libvirt.hypervisor }}/system?keyfile=id_rsa__libvirt_svc&no_verify=1'
#        command: get_guest_agent_info
#        name: "{{item.name}}"
#      delegate_to: localhost
#      run_once: true
#      register: r__virt__guest_agent_info
#      loop: "{{ r__virt__xml.results | json_query(\"[].{name: item.name, instance_state: item.instance_state, xml: get_xml }\") }}"
#
#    - name: get_cluster_hosts_state/libvirt | r__virt__guest_agent_info
#      delegate_to: localhost
#      run_once: true
#      debug: msg="{{ r__virt__guest_agent_info }}"
#
#
#    - name: get_cluster_hosts_state/libvirt | Set cluster_hosts_state
#      set_fact:
#        cluster_hosts_state: |
#          {%- set ns = namespace(res=[]) -%}
#          {%- for res_item in r__virt__guest_agent_info.results -%}
#            {%- set tagslabels = res_item.item.xml | xpath('/domain/metadata/clusterverse:cdata//text()', {'clusterverse': 'https://github.com/dseeley/clusterverse'} ) | json_query('[0]') | from_yaml -%}
#            {%- if tagslabels and 'cv__cluster_name' in tagslabels and tagslabels['cv__cluster_name'] == cluster_name -%}
#              {%- set ns_disk_info_cloud = namespace(disk_info=[]) -%}
#              {%- for diskIdx in range(1, (res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]/source/@file') | length + 1)) -%}
#                {%- set ns_disk_info_cloud.disk_info = ns_disk_info_cloud.disk_info + [{
#                  'target_dev': res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/target/@dev') | json_query('[0]'),
#                  'source_file': res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/source/@file') | json_query('[0]'),
#                  'serial': res_item.item.xml | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/serial//text()') | json_query('[0]')
#                }] -%}
#              {%- endfor -%}
#              {%- set cluster_host = {
#                'tagslabels': tagslabels,
#                'name': res_item.item.name,
#                'instance_id': res_item.item.name,
#                'instance_state': res_item.item.instance_state,
#                'regionzone': tagslabels['cv__regionzone'],
#                'disk_info_cloud': ns_disk_info_cloud.disk_info,
#                'ipv4': {
#                  'private': res_item['guest_agent_info']['interfaceAddresses'] | dict2items | json_query('[?key != `lo`]|[0].value.addrs[0].addr'),
#                  'public': None
#                }
#              } -%}
#              {%- set ns.res = ns.res + [cluster_host] -%}
#            {%- endif -%}
#          {%- endfor -%}
#          {{ ns.res }}


- name: get_cluster_hosts_state/libvirt | get cluster_hosts_state using the inventory plugin.
  block:
    - name: get_cluster_hosts_state/libvirt | Get basic instance info of all vms
      set_fact:
        libvirt_inventory: "{{ lookup('dseeley.inventory_lookup.inventory', 'community.libvirt.libvirt', plugin_options=params) }}"
      vars:
        params:
          uri: 'qemu+ssh://{{ cluster_vars.libvirt.username }}@{{ cluster_vars.libvirt.hypervisor }}/system?keyfile=id_rsa__libvirt_svc&no_verify=1'

#    - name: get_cluster_hosts_state/libvirt | debug libvirt_inventory
#      debug: msg={{libvirt_inventory}}

    - name: get_cluster_hosts_state/libvirt | Set cluster_hosts_state
      ansible.builtin.set_fact:
        cluster_hosts_state: |
          {%- set ns = namespace(res=[]) -%}
          {%- for host in libvirt_inventory | json_query('[].all[]') -%}
            {%- set hostname = host.keys() | first -%}
            {%- set tagslabels = host[hostname].xml_desc | xpath('/domain/metadata/clusterverse:cdata//text()', {'clusterverse': 'https://github.com/dseeley/clusterverse'} ) | json_query('[0]') | from_yaml -%}
            {%- if tagslabels and 'cv__cluster_name' in tagslabels and tagslabels['cv__cluster_name'] == cluster_name -%}
              {%- set ns_disk_info_cloud = namespace(disk_info=[]) -%}
              {%- for diskIdx in range(1, (host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]/source/@file') | length + 1)) -%}
                {%- set ns_disk_info_cloud.disk_info = ns_disk_info_cloud.disk_info + [{
                  'target_dev': host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/target/@dev') | json_query('[0]'),
                  'source_file': host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/source/@file') | json_query('[0]'),
                  'serial': host[hostname].xml_desc | xpath('/domain/devices/disk[@type=\"file\"]['+diskIdx|string+']/serial//text()') | json_query('[0]')
                }] -%}
              {%- endfor -%}
              {%- set cluster_host = {
                'tagslabels': tagslabels,
                'name': hostname,
                'instance_id': hostname,
                'instance_state': host[hostname].info.state,
                'regionzone': tagslabels['cv__regionzone'],
                'disk_info_cloud': ns_disk_info_cloud.disk_info,
                'ipv4': {
                  'private': host[hostname]['interface_addresses'] | dict2items | json_query('[?key != `lo`]|[0].value.addrs[0].addr'),
                  'public': None
                }
              } -%}
              {%- set ns.res = ns.res + [cluster_host] -%}
            {%- endif -%}
          {%- endfor -%}
          {{ ns.res }}
