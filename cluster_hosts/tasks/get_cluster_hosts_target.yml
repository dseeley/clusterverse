---

# Create an array of dictionaries containing all the hostnames PER-AZ (i.e. couchbase-dev-node-a0, couchbase-dev-master-a1, couchbase-dev-master-b0, couchbase-dev-master-b1 etc) to be created:
- name: get_cluster_hosts_target | Create cluster_hosts_target from the cluster definition in cluster_vars
  ansible.builtin.set_fact:
    cluster_hosts_target: |
      {%- set ns = namespace(res=[]) -%}
      {%- for hosttype in cluster_vars[buildenv].hosttype_vars.keys() -%}
        {%- for azname in cluster_vars[buildenv].hosttype_vars[hosttype].vms_by_az.keys() -%}
          {%- for azcount in range(0, cluster_vars[buildenv].hosttype_vars[hosttype].vms_by_az[azname] | int) -%}
            {%- set ns.res = ns.res + [{
              'hosttype': hosttype,
              'hostname': cluster_name + '-' + ((hosttype + '-') if (omit_singleton_hosttype_from_hostname is not defined or not omit_singleton_hosttype_from_hostname | bool or (cluster_vars[buildenv].hosttype_vars.keys() | length > 1)) else '') + azname | string + azcount | string + '-' + cluster_suffix | string,
              'az_name': azname | string,
              'flavor': cluster_vars[buildenv].hosttype_vars[hosttype].flavor,
              'image': cluster_vars[buildenv].hosttype_vars[hosttype].image | default(cluster_vars.image),
              'auto_volumes': cluster_vars[buildenv].hosttype_vars[hosttype].auto_volumes
            }] -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ ns.res }}

- name: get_cluster_hosts_target | cluster_hosts_target
  debug: msg={{cluster_hosts_target}}
  delegate_to: localhost
  run_once: true

- name: get_cluster_hosts_target | Update cluster_hosts_target image (per hosttype) with the image used in an existing cluster (when existing cluster)
  block:
    - set_fact: { __orig_cluster_hosts_target: "{{ cluster_hosts_target }}" }         ## NOTE: We cannot use a 'vars:' variable at the block-level in place of a 'set_fact:' variable here, because a 'vars:' assignment only does a shallow-copy, (so cluster_hosts_target becomes the same as __orig_cluster_hosts_target), whereas 'set_fact:' does a deep-copy

    - name: get_cluster_hosts_target | Update cluster_hosts_target image (per hosttype) with the image used in an existing cluster
      ansible.builtin.set_fact:
        cluster_hosts_target: |
          {%- set ns = namespace(res=[]) -%}
          {%- for host in cluster_hosts_target -%}
            {%- set _existing_image_per_hosttype = cluster_hosts_state | json_query('[?tagslabels.cv__hosttype==\'' + host.hosttype + '\' && tagslabels.cv__lifecycle_state==\'current\' && image].image') -%}
            {%- set updated_host = host -%}
            {%- if _existing_image_per_hosttype | length > 0 -%}
              {%- set updated_host = host | combine({'image': _existing_image_per_hosttype[0]}) -%}
            {%- endif -%}
            {%- set ns.res = ns.res + [updated_host] -%}
          {%- endfor -%}
          {{ ns.res }}

    - warn_str: msg="get_cluster_hosts_target | Replaced some base images to ensure consistency across hosttype. {{cluster_hosts_target | symmetric_difference(__orig_cluster_hosts_target)}}"
      when: (cluster_hosts_target | symmetric_difference(__orig_cluster_hosts_target) | length > 0)
  when: (cluster_hosts_state | json_query('[?tagslabels.cv__lifecycle_state==\'current\']') | length > 0  and  (override_deprecated_ami is defined and not override_deprecated_ami | bool))


- name: get_cluster_hosts_target | Augment with cloud-specific parameters (if necessary)
  include_tasks: "{{ item__include_tasks }}"
  loop: "{{ query('first_found', params) }}"
  loop_control: { loop_var: item__include_tasks }   #This mechanism to include_tasks only when the file exists, also creates a loop iterator 'item' that it sends to the included tasks.  If they also have loops, we get "The loop variable 'item' is already in use" warning.
  vars: { params: { files: ["get_cluster_hosts_target_{{cluster_vars.type}}.yml"], skip: true } }


- name: get_cluster_hosts_target | cluster_hosts_target
  debug: msg={{cluster_hosts_target}}
  delegate_to: localhost
  run_once: true
